# -*- coding: utf-8 -*-
"""Diabetes_Classification_LogReg_RF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ROwbucgrg56l4ntG2jsHFYHcECFuInpp

# **Klasifikasi Risiko Diabetes Menggunakan Logistic Regression dan Random Forest**

Diabetes merupakan penyakit kronis yang dapat dicegah atau dikendalikan dengan deteksi dini berdasarkan gaya hidup dan faktor kesehatan individu. Proyek ini bertujuan membangun model prediksi risiko diabetes menggunakan data kesehatan dan perilaku pasien.

### Problem Statement:
- Bagaimana mengklasifikasikan individu ke dalam kategori memiliki diabetes atau tidak berdasarkan fitur kesehatan dan perilaku?

### Solution Statement:
- Menggunakan dua pendekatan machine learning:
  1. **Logistic Regression** sebagai model baseline yang mudah diinterpretasikan.
  2. **Random Forest** sebagai model lanjutan yang mampu menangkap pola non-linear dan interaksi antar fitur.

### Sumber Dataset:
- Dataset Diabetes diperoleh dari Kaggle dan memiliki lebih dari 500 sampel serta beragam fitur kesehatan dan gaya hidup.

## **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, accuracy_score

"""## **Load Data dan Statistik Deskriptif**
Membaca data, mengecek null values, dan menaganlisis statistik deskriptif. Dataset yang digunakan berisi informasi kesehatan dan kebiasaan gaya hidup dari individu dewasa. Setiap baris mewakili satu responden, dengan label target berupa apakah mereka mengidap diabetes (Diabetes = 1) atau tidak (Diabetes = 0).
"""

df = pd.read_csv('diabetes_data.csv')
df.head()

df.info()

"""**Interpretasi:**

*   Total kolom: 17 (16 fitur + 1 target)
*   Semua kolom bertipe numerik (float64)
*   Tidak ditemukan nilai null atau kosong, artinya dataset siap diproses tanpa perlu imputasi data.


"""

df.describe()

"""**Analisis:**
1. Data terdiri dari 70.692 responden tanpa ada nilai kosong. Mayoritas berasal dari kelompok usia lanjut, dengan rata-rata kategori usia di angka 8.6 (sekitar 60–64 tahun). Rasio pria dan wanita cukup seimbang, meskipun sedikit lebih banyak wanita (±54%).
2, Rata-rata BMI berada di angka 29.8, mendekati kategori obesitas ringan. Sekitar 47% responden memiliki riwayat merokok, 70% cukup aktif secara fisik, dan lebih dari separuh rutin mengonsumsi buah dan sayuran setiap hari.
3. Untuk kondisi kesehatan, 52% memiliki kolesterol tinggi dan 56% menderita hipertensi. Sebagian kecil mengalami penyakit jantung (14%) atau stroke (6%). Hampir seluruh responden (97%) pernah melakukan pemeriksaan kolesterol dalam lima tahun terakhir.
4. Sebanyak 25% mengalami kesulitan berjalan dan rata-rata penilaian terhadap kesehatan umum berada di level “cukup baik” (rata-rata 2.8 dari skala 1–5).
5. Label target (Diabetes) terdistribusi seimbang, menjadikan data ini ideal untuk klasifikasi biner.

# **Visualisasi Data (EDA)**
"""

diabetes_counts = df['Diabetes'].value_counts()
labels = ['Tidak Diabetes', 'Diabetes']
colors = ['#66b3ff','#ff9999']

plt.figure(figsize=(6, 6))
plt.pie(diabetes_counts, labels=labels, autopct='%1.1f%%', colors=colors, startangle=90)
plt.title('Pie Chart Distribusi Diabetes')
plt.axis('equal')
plt.show()

# Bar Chart untuk Distribusi Berdasarkan Jenis Kelamin
plt.figure(figsize=(6, 4))
sns.countplot(x='Sex', data=df)
plt.title('Distribusi Data Berdasarkan Jenis Kelamin')
plt.xticks([0, 1], ['Perempuan', 'Laki-laki'])
plt.ylabel('Jumlah')
plt.xlabel('Jenis Kelamin')
plt.show()

corr = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

"""### Insight EDA

1. Distribusi target `Diabetes` cukup seimbang, masing-masing 50% antara penderita dan non-penderita.

2. Dari sisi jenis kelamin, jumlah perempuan sedikit lebih banyak (54%) dibanding laki-laki (46%). Namun, korelasi antara jenis kelamin dan diabetes sangat rendah (0.04), sehingga tidak terlalu berpengaruh dalam prediksi.

3. Beberapa fitur memiliki hubungan cukup kuat dengan risiko diabetes. Yang paling menonjol adalah kondisi kesehatan umum (`GenHlth`, korelasi 0.41), hipertensi (0.38), kolesterol tinggi (0.32), BMI (0.29), dan usia (0.28). Artinya, semakin buruk kondisi kesehatan seseorang dan semakin tinggi tekanan darah atau berat badannya, makin besar kemungkinan ia mengidap diabetes.

4. Sebaliknya, aktivitas fisik menunjukkan korelasi negatif (-0.14) meski lemah.

## **Normalisasi Data dan Split Data**
"""

X = df.drop('Diabetes', axis=1)
y = df['Diabetes']

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

"""**Insight:**
Data telah dipisahkan antara fitur (X) dan target (y). Semua fitur dinormalisasi agar berada dalam skala yang sama, terutama untuk menghindari bias pada algoritma yang sensitif terhadap skala seperti Logistic Regression. Data kemudian dibagi dengan rasio 70:30 untuk pelatihan dan pengujian.

## **Membangun Model**
1. Model Logistic Regression dibangun menggunakan objek `LogisticRegression()` dari scikit-learn. Data yang sudah dinormalisasi digunakan sebagai input, dan model dilatih menggunakan data training untuk memprediksi dua kelas: diabetes atau tidak.
2. Model Random Forest dibangun dengan `RandomForestClassifier()` dan menggunakan parameter yang sudah dituning. Model ini dilatih pada data yang sama untuk membandingkan hasilnya dengan Logistic Regression.
"""

# Logistic Regression
lr = LogisticRegression(class_weight='balanced')
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Membangun dan melatih Random Forest
rf = RandomForestClassifier(
    n_estimators=200,
    max_depth=15,
    min_samples_split=5,
    min_samples_leaf=2,
    class_weight='balanced',
    random_state=50
)

rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

"""## **Insight**

Dua model digunakan untuk klasifikasi risiko diabetes berdasarkan data gaya hidup dan kondisi kesehatan.

### Logistic Regression:
Model ini dibangun untuk mengenali pola linear antara fitur (seperti tekanan darah, BMI, usia) dengan kemungkinan diabetes.  
Model dilatih dengan:
- Fungsi aktivasi sigmoid (default untuk klasifikasi biner),
- Loss: `log loss` (implisit dalam `LogisticRegression()`),
- Optimizer: metode gradien bawaan dari solver `'lbfgs'`,
- Parameter `class_weight='balanced'` untuk menangani kemungkinan ketidakseimbangan kelas.

### Random Forest:
Model ini digunakan untuk menangkap hubungan non-linear dan interaksi antar fitur.  
Struktur model terdiri dari:
- 200 pohon keputusan (estimators),
- Maksimum kedalaman pohon: 15,
- Minimal 5 data per split dan 2 data per daun (leaf),
- Parameter `class_weight='balanced'` agar adil terhadap kedua kelas.

Kedua model dilatih menggunakan data yang telah dinormalisasi dan dibagi 70:30 untuk pelatihan dan pengujian. Tujuannya adalah membandingkan pendekatan sederhana (LR) dengan pendekatan yang lebih fleksibel dan kompleks (RF) dalam memprediksi risiko diabetes.

## **Evaluasi Model**
Evaluasi Model menggunakan precision, recall, f1-score, dan confusion matrix.
"""

print("Classification Report - Logistic Regression")
print(classification_report(y_test, y_pred_lr))

conf_matrix_lr = confusion_matrix(y_test, y_pred_lr)
sns.heatmap(conf_matrix_lr, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print("Classification Report - Random Forest (Fitur Berkorelasi Tinggi)")
print(classification_report(y_test, y_pred))

conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)
sns.heatmap(conf_matrix_rf, annot=True, fmt="d", cmap="Greens")
plt.title("Confusion Matrix - Random Forest")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

"""**Insight Evaluasi Model**:
Kedua model — Logistic Regression dan Random Forest — sama-sama menghasilkan akurasi sebesar 75%. Namun, ada perbedaan dalam cara keduanya mengenali kasus diabetes.

Logistic Regression lebih seimbang, dengan recall 77% untuk kasus diabetes dan precision 74%. Ini menunjukkan model cukup baik dalam mengenali penderita diabetes tanpa terlalu banyak salah prediksi.

Sementara itu, Random Forest memiliki recall yang lebih tinggi untuk kelas diabetes (80%), artinya model ini lebih agresif dalam mendeteksi kasus positif. Namun, hal ini dibayar dengan penurunan presisi dan lebih banyak salah prediksi untuk kelas non-diabetes.

Secara umum, Random Forest lebih cocok jika prioritas utamanya adalah mendeteksi sebanyak mungkin kasus diabetes, meskipun ada risiko lebih tinggi memprediksi orang sehat sebagai sakit. Logistic Regression lebih cocok jika dibutuhkan hasil yang lebih stabil dan seimbang antar kelas.

# **Kesimpulan**

Model klasifikasi risiko diabetes berhasil dibuat menggunakan dua pendekatan: Logistic Regression dan Random Forest. Keduanya dilatih menggunakan data kesehatan dan gaya hidup, seperti usia, tekanan darah, BMI, dan kondisi umum responden.

Beberapa hal penting dari proyek ini:

- Kedua model sama-sama menghasilkan **akurasi sekitar 75%** pada data uji.
- **Logistic Regression** memberi hasil yang cukup seimbang antara mendeteksi dan membedakan penderita serta non-penderita diabetes.
- **Random Forest** cenderung lebih agresif dalam mengenali kasus diabetes, dengan recall yang lebih tinggi (80%), meskipun sedikit menurunkan presisi.
- Confusion matrix menunjukkan bahwa kedua model bekerja dengan cukup baik, meskipun pendekatannya berbeda. Logistic Regression memberikan hasil yang lebih seimbang antar kelas, sedangkan Random Forest lebih fokus dalam mendeteksi kasus diabetes dengan recall yang lebih tinggi.
- Model ini menunjukkan bahwa data sederhana pun bisa digunakan untuk mendeteksi risiko diabetes dengan cukup baik.

Ke depan, model masih bisa ditingkatkan lewat:
- Penambahan fitur yang lebih relevan seperti riwayat keluarga atau pola makan, agar informasi yang digunakan lebih lengkap,
- Penyesuaian parameter model (tuning) untuk mengoptimalkan akurasi dan mengurangi kesalahan prediksi,
- Uji coba dengan model lain seperti XGBoost yang umumnya lebih unggul dalam menangani data tabular dan kompleksitas fitur.
"""